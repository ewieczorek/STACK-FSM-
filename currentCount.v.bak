module currentCount(reg0, reg1, reg2, reg3, count);
	input [3:0] reg0, reg1, reg2, reg3;
	output reg [2:0] count;
	reg r0, r1, r2, r3;
	
	always@(reg0 or reg1 or reg2 or reg3)
	begin 
		r0 = reg0[0] + reg0[1] + reg0[2] + reg0[3];
		r1 = reg1[0] + reg1[1] + reg1[2] + reg1[3];
		r2 = reg2[0] + reg2[1] + reg2[2] + reg2[3];
		r3 = reg3[0] + reg3[1] + reg3[2] + reg3[3];
		
		case({r3, r2, r1, r0})
			4'b0000: count = 3'b000;
			4'b0001: count = 3'b001;
			4'b0010: count = 3'b010;
			4'b0011: count = 3'b010;
			4'b0100; count = 3'b011;
			4'b0101; count = 3'b011;
			4'b0110; count = 3'b011;
			4'b0111; count = 3'b011;
			4'b1000; count = 3'b100;
			4'b1001; count = 3'b100;
			4'b1010; count = 3'b100;
			4'b1011; count = 3'b100;
			4'b1100; count = 3'b100;
			4'b1101; count = 3'b100;
			4'b1110; count = 3'b100;
			4'b1111; count = 3'b100;
		endcase
	end
	
endmodule